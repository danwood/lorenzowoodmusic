/*
================================================================================

Generic, Useful for many sites

================================================================================
*/

/*
----------------------------------------
Flexbox Sticky Footer
----------------------------------------
*/

/* Flexbox sticky footer
	https://philipwalton.github.io/solved-by-flexbox/demos/sticky-footer/

	Using my top-level tags rather than their classes.
	Also, including MS syntax to try and support IE 9. But not old webkit classes.

	Not really needed on a long-content page, but still useful to have in place.
*/

/**
 * 1. Avoid the IE 10-11 `min-height` bug.
 * 2. Set `flex-shrink` to `0` to prevent some browsers from
 *	letting these items shrink to smaller than their content's default
 *	minimum size. See http://bit.ly/1Mn35US for details.
 * 3. Use `%` instead of `vh` since `vh` is buggy in older mobile Safari.
 */

html, body {
	height:100%; /* 1, 3 */
}

body {
	display:-ms-flexbox;
	display:flex;
	-ms-flex-direction:column;
	flex-direction:column;
}

body > header,
body > footer {
	-ms-flex:none;
	flex:none; /* 2 */
}

body > main {
	-ms-flex:1 0 auto;
	flex:1 0 auto; /* 2 */
}
/*
----------------------------------------
Other General Layout
----------------------------------------
*/

html {
	box-sizing:border-box;
}

/*
----------------------------------------
General Utility Classes
----------------------------------------
*/

/* Useful for image replacement */
.ir {
	border:0!important;
	font:0/0 a!important;
	text-shadow:none!important;
	color:transparent!important;
	width:0!important;
	height:0!important;
	padding:0!important;
}

/*
----------------------------------------
Left & Right Margins
----------------------------------------
*/

section, .safe-area {
	padding-left:1rem;			/* Fallback if safe area not understood */
	padding-right:1rem;
}

/* For iPhone X. Use @supports per https://webkit.org/blog/7929/designing-websites-for-iphone-x/
	iPhone X constants are supported only on browsers that support Max, so only use these within.
*/
@supports(padding:max(0px)) {
	section, .safe-area {
		// use m#{a}x instead of max to allow this to be compiled with Sass
		padding-left:m#{a}x(1rem, env(safe-area-inset-left));
		padding-right:m#{a}x(1rem, env(safe-area-inset-right));
	}
	.safe-area-only {
		padding-left:env(safe-area-inset-left);
		padding-right:env(safe-area-inset-right);
	}
}

// If we don't want the section itself to be padded, use this class. Just be sure to use .safe-area within

section.unpadded {
	padding:0;
}
.subsection {
	overflow:hidden;
	// solve problem of slide-in graphics making page wider until item is scrolled into view
	@extend .safe-area
}

/*
----------------------------------------
JS detection
----------------------------------------
*/

.no-js .requires-js {		// Hide stuff that requires JS when JS is unavailable
	display:none;
}
.js .js-warning {			// For warning that JS is required, hide if JS is available
	display:none;
}
.js .js-hidden {			// Content that is initially hidden if JS is available. (Remove class to reveal.)
	display:none;
}
.no-js p.js-warning {
	padding:0.5rem 1rem;
	margin:0;
	color:purple;
	background:white;
}

.browserupgrade {		// This used to be in H5BP but now it's here, improved.
	margin:0.2em 0;
	background:#ccc;
	color:#000;
	font-size:150%;
	padding:1rem;
}

/*
----------------------------------------
Other useful stuff!
----------------------------------------
*/

iframe {
	border:none;
}

/* Allows defs to be defined first without showing up */

svg defs {
	height:0;
	position:absolute;
	width:0;
}

img {
	max-width:100%;
	height:auto;
}

.centered {
	text-align:center;
	margin-left:auto;
	margin-right:auto;
}

// Class that a javascript can then remove in order to show something (or install to hide)
// Technically the same as h5bp's .hidden, but a different class to make it clear that the intent is to show/hide.
.none {
	display:none!important;
}
